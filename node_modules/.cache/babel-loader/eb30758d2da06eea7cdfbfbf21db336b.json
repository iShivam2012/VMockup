{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\n\nconst reducerFunc = (state, action) => {\n  if (action.type === \"SEND\") {\n    return { ...state,\n      status: \"Pending\"\n    };\n  } else if (action.type === \"ERROR\") {\n    return { ...state,\n      error: action.payload,\n      status: \"Completed\"\n    };\n  } else if (action.type === \"SUCCESS\") {\n    return { ...state,\n      data: action.payload,\n      status: \"Completed\"\n    };\n  }\n\n  return state;\n};\n\nconst useHttp = (reqData, applyData, startWithPending = false) => {\n  _s();\n\n  const [state, actionDispatch] = useReducer(reducerFunc, {\n    data: null,\n    error: null,\n    status: startWithPending ? \"Pending\" : null\n  });\n\n  const sendRequest = async body => {\n    actionDispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const response = await fetch(reqData.url, {\n        method: reqData.method ? reqData.method : \"GET\",\n        body: body ? JSON.stringify(body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const responseData = await response.json();\n      const resp = await applyData(responseData, reqData.param);\n      actionDispatch({\n        type: \"SUCCESS\",\n        payload: resp\n      });\n    } catch (error) {\n      actionDispatch({\n        type: \"ERROR\",\n        payload: error.message || \"Error\"\n      });\n    }\n  };\n\n  return {\n    sendRequest,\n    ...state\n  };\n};\n\n_s(useHttp, \"/6ExB+1M5Iip5TXFuH2JMmwYKcc=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/Shivam/Documents/Study/Projects/React Project/Udemy-Projects/QuotesRoutingProject/src/use-hook/use-http.js"],"names":["useReducer","reducerFunc","state","action","type","status","error","payload","data","useHttp","reqData","applyData","startWithPending","actionDispatch","sendRequest","body","response","fetch","url","method","JSON","stringify","ok","Error","responseData","json","resp","param","message"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,WAAO,EACL,GAAGF,KADE;AAELG,MAAAA,MAAM,EAAE;AAFH,KAAP;AAID,GALD,MAKO,IAAIF,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAClC,WAAO,EACL,GAAGF,KADE;AAELI,MAAAA,KAAK,EAAEH,MAAM,CAACI,OAFT;AAGLF,MAAAA,MAAM,EAAE;AAHH,KAAP;AAKD,GANM,MAMA,IAAIF,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA+B;AACpC,WAAO,EACL,GAAGF,KADE;AAELM,MAAAA,IAAI,EAAEL,MAAM,CAACI,OAFR;AAGLF,MAAAA,MAAM,EAAE;AAHH,KAAP;AAKD;;AACD,SAAOH,KAAP;AACD,CApBD;;AAsBA,MAAMO,OAAO,GAAG,CAACC,OAAD,EAAUC,SAAV,EAAqBC,gBAAgB,GAAG,KAAxC,KAAkD;AAAA;;AAChE,QAAM,CAACV,KAAD,EAAQW,cAAR,IAA0Bb,UAAU,CAACC,WAAD,EAAc;AACtDO,IAAAA,IAAI,EAAE,IADgD;AAEtDF,IAAAA,KAAK,EAAE,IAF+C;AAGtDD,IAAAA,MAAM,EAAEO,gBAAgB,GAAG,SAAH,GAAe;AAHe,GAAd,CAA1C;;AAKA,QAAME,WAAW,GAAG,MAAOC,IAAP,IAAgB;AAClCF,IAAAA,cAAc,CAAC;AACbT,MAAAA,IAAI,EAAE;AADO,KAAD,CAAd;;AAIA,QAAI;AACF,YAAMY,QAAQ,GAAG,MAAMC,KAAK,CAACP,OAAO,CAACQ,GAAT,EAAc;AACxCC,QAAAA,MAAM,EAAET,OAAO,CAACS,MAAR,GAAiBT,OAAO,CAACS,MAAzB,GAAkC,KADF;AAExCJ,QAAAA,IAAI,EAAEA,IAAI,GAAGK,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAH,GAA0B;AAFI,OAAd,CAA5B;;AAIA,UAAI,CAACC,QAAQ,CAACM,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,YAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAA3B;AACA,YAAMC,IAAI,GAAG,MAAMf,SAAS,CAACa,YAAD,EAAed,OAAO,CAACiB,KAAvB,CAA5B;AACAd,MAAAA,cAAc,CAAC;AACbT,QAAAA,IAAI,EAAE,SADO;AAEbG,QAAAA,OAAO,EAAEmB;AAFI,OAAD,CAAd;AAID,KAdD,CAcE,OAAOpB,KAAP,EAAc;AACdO,MAAAA,cAAc,CAAC;AACbT,QAAAA,IAAI,EAAE,OADO;AAEbG,QAAAA,OAAO,EAAED,KAAK,CAACsB,OAAN,IAAiB;AAFb,OAAD,CAAd;AAID;AACF,GAzBD;;AA2BA,SAAO;AAAEd,IAAAA,WAAF;AAAe,OAAGZ;AAAlB,GAAP;AACD,CAlCD;;GAAMO,O;;AAoCN,eAAeA,OAAf","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nconst reducerFunc = (state, action) => {\r\n  if (action.type === \"SEND\") {\r\n    return {\r\n      ...state,\r\n      status: \"Pending\",\r\n    };\r\n  } else if (action.type === \"ERROR\") {\r\n    return {\r\n      ...state,\r\n      error: action.payload,\r\n      status: \"Completed\",\r\n    };\r\n  } else if (action.type === \"SUCCESS\") {\r\n    return {\r\n      ...state,\r\n      data: action.payload,\r\n      status: \"Completed\",\r\n    };\r\n  }\r\n  return state;\r\n};\r\n\r\nconst useHttp = (reqData, applyData, startWithPending = false) => {\r\n  const [state, actionDispatch] = useReducer(reducerFunc, {\r\n    data: null,\r\n    error: null,\r\n    status: startWithPending ? \"Pending\" : null,\r\n  });\r\n  const sendRequest = async (body) => {\r\n    actionDispatch({\r\n      type: \"SEND\",\r\n    });\r\n\r\n    try {\r\n      const response = await fetch(reqData.url, {\r\n        method: reqData.method ? reqData.method : \"GET\",\r\n        body: body ? JSON.stringify(body) : null,\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      const responseData = await response.json();\r\n      const resp = await applyData(responseData, reqData.param);\r\n      actionDispatch({\r\n        type: \"SUCCESS\",\r\n        payload: resp,\r\n      });\r\n    } catch (error) {\r\n      actionDispatch({\r\n        type: \"ERROR\",\r\n        payload: error.message || \"Error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return { sendRequest, ...state };\r\n};\r\n\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}